{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.py",
	"patterns": [
		{"include": "#module_names"},{"include": "#keywords"},{"include": "#comments"},{"include": "#strings"}, {"include": "#operators"},{"include": "#numbers"}
	],
	"repository": {
		"module_names": {
			"patterns": [{
					"name": "python.module_names.standard",
					"match": "\\b(os|sys|math|time|np|numpy|datetime|scipy|scio|glob)\\b"
				},
				{				
					"name": "python.module_names.package",
					"match": "\\b(fem|io|nls|mesh|cpp|log|MPI|dolfinx|mpi4py|petsc4py|pets|ufl)\\b"
				},
				{				
					"name": "python.module_names.custom",
					"match": "\\b(cdfx|Notes|CustomPlot|ViscousMats|TestParameters(?!\\())\\b"
				}
			]
		},
		"keywords": {
			"patterns": [{
					"name": "python.attributes",
					"match": "\\b((?<=\\.)[a-zA-Z_]{1,}[0-9]{0,}(?=(\\.|\\s|\\)|\\[|,|\\]){1}))\\b"
				},
				{
					"name": "python.functions.called_attribute",
					"match": "(?<=\\.)[a-z,A-Z,_]{1,}(?=\\()"
				},
				{
					"name": "python.functions.called_mono",
					"match": "(?<!class\\s)(?<=[\\s|\\(]{1,})[a-z,A-Z,_]{1}[a-z,A-Z,_0-9]{0,}(?=\\(.{0,}\\))"
				},
				{
					"name": "python.functions.defined",
					"match": "((?<=def\\s)[a-z,A-Z,_]{1,}(?=\\())"
				},
				{
					"name": "python.functions.reserved",
					"match": "\\b((range(?=\\())|open(?=\\())\\b"
				},
				{
					"name": "python.functions.special",
					"match": "\\b(quit(?=\\(\\))|print(?=\\()|abs(?=\\()|Exception(?=\\()|str(?=\\())\\b"
				},
				{
					"name": "python.reserved",
					"match": "\\b(raise\\s|while|and|or|from|import|def|[\\t]{0,}if\\s[\\(]{0,1}|((?<=\\))[:]{1}$)|return|\\sin\\s|continue)\\b"
				},
				{
					"name": "python.reserved.else",
					"match": "\\b([\\t]{0,}else[\\s]{0,}[\\(]{0,})\\b"
				},
				{
					"name": "python.reserved.logic",
					"match": "\\b((?<=(\\s|\\())not(?=(\\()|\\s))\\b"
				},
				{
					"name": "python.reserved.for",
					"match": "\\b([\\t]{0,}for(?=[\\s]{1,}[0-9a-z]{1,}))\\b"
				},				
				{
					"name": "python.reserved.others",
					"match": "\\b((?<=\\s)as(?=\\s)|^with\\s)\\b"
				},				
				{
					"name": "python.keywords.class",
					"match": "\\b(^class|super|(?<=\\*\\*)kwargs)\\b"
				},		
				{
					"name": "python.keywords.class.called",
					"match": "\\b((?<!class\\s)[a-zA-Z]{1,}(?=\\(\\)))\\b"
				},
				{
					"name": "python.keywords.special",
					"match": "\\b(True|False|None)\\b"
				},		
				{
					"name": "python.keywords.args",
					"match": "\\b((?<=(\\([^\\(]{1,},[\\s]{0,}))[a-z_A-Z]{1,}(?=([\\s]{0,}[\\=]{1}[^=])))\\b"
				},
				{
					"name": "python.keywords.args.firstArg",
					"match": "\\b((?<=(\\([\\s]{0,}))[a-z_]{1,}(?=([\\s]{0,}[\\=]{1}[^=])))\\b"
				}				
			]
		},
		"comments": {
			"patterns": [{
					"name": "python.comments.inline",
					"match": "(^#.{0,}$|#.{0,}$)"
				},
				{
					"name": "python.comments.block",
					"match": "\"\"\"\n"
				}
			]
		},
		"strings": {
			"patterns": [{
					"name": "python.strings.variable",
					"match": "([\"]{1}[^\"]{1,}[\"]{1})"
				},
				{
					"name": "python.strings.fstring",
					"match": "(f(?=\"))"
				},
				{
					"name": "python.strings.singles",
					"match": "([']{1}[^\":]{1,}[']{1})"
				}
			]
		},
		"operators": {
			"patterns": [{
					"name": "python.operators.standard",
					"match": "(=|-|\\+|\\*|\\>|\\<|/)"
				},
				{
					"name": "python.operators.power",
					"match": "\\b((?<=([0-9]+))e(?=(-*[0-9]+)))\\b"
				}
			]
		},
		"numbers": {
			"patterns": [{
					"name": "python.numbers",
					"match": "((?<![^0-9/\\s-]{1})[0-9]{1,}[\\.]{0,1}[0-9]{0,})"
				},
				{
					"name": "python.numbers.bracketed",
					"match": "\\b((?<=\\[)[\\s]{0,}[0-9]{1,}[\\.]{0,1}[0-9]{0,}(?=([\\s]{0,}\\])))\\b"
				}
			]
		}
	}
}